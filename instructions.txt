


# simulation
ros2 launch nav2_bringup tb3_simulation_launch.py headless:=False



(SLAM) Navigating while Mapping



# launch robot interface and robot state publisher
ros2 launch turtlebot3_bringup robot.launch.py----------------------------------------------------------------

# Launch navigation without nav2_amcl and nav2_mapserver. SLAM nodes will publish /map topic and provide map-odom tf
ros2 launch nav2_bringup navigation_launch.py

# Launch SLAM, Make sure it provixes map->odom tf and /map topic. online သူက previous logged data မသုံးတာ Asynchronous ကတော့ skipping some scans
ros2 launch slam_toolbox online_async_launch.py params_file:=/home/mr_robot/ros2/ros2_ws/src/rom2109/rom2109_bringup/config/mapper_params_online_async.yaml use_sim_time:=true

# Working with slam, make your robot by requesting a goal through Rviz or ROS2 CLI	
ros2 topic pub /goal_pose geometry_msgs/PoseStamped "{header: {stamp: {sec: 0}, frame_id: 'map'}, pose: {position: {x: 0.2, y: 0.0, z: 0.0}, orientation: {w: 1.0}}}"

# You should see the map update live. to save this map to file:
ros2 run nav2_map_server map_saver_cli -f ~/map

# Getting started Simplication
ros2 launch nav2_bringup tb3_simulation_launch.py slam:=True

-------------------------------------------------------------------------------
# MAPPING
# cp /opt/ros/humble/share/slam_toolbox/config/mapper_params_online_async.yaml your_path/

# launch your simulation robot
ros2 launch slam_toolbox online_async_launch.py params_file:=/path/to/ use_sim_time:=true
# ------သို့မဟုတ်------- #
ros2 launch rom2109_nav2 online_async_launch_mapping_launch.py
# in rviz , add map, change fixed frame to map
# OR open slam.rviz

# drive robot
ros2 run teleop_twist_keyboard teleop_twist_keyboard /cmd_vel:=/diff_cont/cmd_vel_unstamped

# to save map
# RVIZ Panels -> add_new panel > slamtoolbox
# map save ဖို့က format နှစ်မျိုးရှိတယ်။ တမျိုးက old style သူက ပြန်ဖွင့်ဖို့  map server လိုမယ်။ Serialize လုပ်ပြီးသိမ်းရင်တော့ slamtoolbox က ပြန်ဖွင့်ပေးနိုင်

# map ပြန်ထည့်ဖို့ yaml, map_server နည်း နှစ်ခုရှိပြီး yaml မှာဆိုရင် mapping ကို localization ပြောင်း , map path ထည့်ပေးပါ။ 
ros2 launch rom2109_nav2 online_async_launch_localization_launch.py
# ------သို့မဟုတ်------- #
ros2 run nav2_util lifecycle_bringup map_server
ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=my_mape_old.yaml -p use_sim_time:true
# ဒါဆို rviz မှာကြည့်ရင် map တွေ့ပါလိမ့်မယ်။ မတွေ့ရင် Map ရဲ့ Topic->Durability Policy မှာ Volatile အား Transient Local ပြောင်းပေးပါ။
# သတိပြုဖို့က map-> odom ကို slamtoolbox က ထုတ်သလို amcl ကလည်းထုတ်နေတာပါပဲ။ ဒါကြောင့် jumping ဖြစ်နေနိုင်တယ်။
# TO FIX -> duplicate map->odom publisher


-------------------------------------------------------------------------------
# LOCALIZATION
# အခုဆိုရင် amcl localisation ကို သုံးလို့ရပါပြီ။
ros2 run nav2_util lifecycle_bringup amcl
ros2 run nav2_amcl amcl --ros-args -p use_sim_time:=true
# ခုဆိုရင် initial pose တစ်ခုလိုတာမို့ warning ပြပါလိမ့်မယ်။ /initial_pose ကို topic နည်းလမ်းနဲ့ ပေးနိုင်သလို RVIZ ကနေ 2D Pose Estimate ကိုနှိပ်ပြီး ပေးနိုင်ပါတယ်။
# RViz --> 2D Pose Estimate
# amcl အဆင်ပြေပေမဲ့ robot သည် rviz တွင် jumping ဖြစ်နေတယ်။
# TO FIX -> duplicate map->odom publisher


-------------------------------------------------------------------------------
# NAVIGATION
# velocity topic တွေပေါင်းဖို့ twist_mux ကို သုံးသင့်တယ်။
sudo apt install ros-humble-twist-mux ros-humble-nav2*     
# သူ့အတွက် yaml ဖိုင်ကို rom2109_gazebo ထဲမှာထည့်ထားတယ်။  output topic ကို လည်း remap လုပ်ပြီး run ပါမယ်။
# stamped velocity ကို သုံးမယ်ဆိုရင်တော့ ဒါကို သုံးစရာမလိုပါ။ 
# simulation နဲ့ slam toolbox ကို run ပြီး twist_mux ကို စမ်းကြည့်ပါ။ ( နောက်ပိုင်းမှာတော့ twist_mux node ကို simulation launch ထဲပေါင်းထည့်ထားသည် )
ros2 run twist_mux twist_mux --ros-args --params-file twist_mux.yaml -r cmd_vel_out:=diff_cont/cmd_vel_unstamped
# ပြီးရင်တော့ navigation launch ကို run ပါ။
ros2 launch nav2_bringup navigation_launch.py use_sim_time:=true 
# default param များပြောင်းလဲဖို့လိုသည် map အသစ်တစ်ခု ထပ်ထည့်ရန် topic တွင် global costmap ရွေးရန်
# ပြီးရင် rviz မှာ 2D goal pose  ပေးပြီး စမ်းသပ်ပါ။ navigation_launch.py ရဲ့ parameter များသည် turtlebot3 အတွက်ဖြစ်ပေမဲ့ 
# rom2109 robot အတွက် အောင်မြင်စွာ Goal ပေးသွားလာနိုင်ပါသည်။


# rviz -> Panels မှာ nagigation2 ထည့်ပြီး rviz တွင် + sign ကိုနှိပ်ပြီး GoalTool ကိုနှိပ် ( Goal Tool plugin မရ )
# GoalTool ရရင် navigation2 goal တချက်စီနှိပ်ပြီး waypoint လိုက်ချပါ။ waypoint များချပြီးတော့မှာ Navigation Panel က start navigation ကိုနှိပ်ရင် 
# way point အတိုင်းသွားပါလိမ့်မယ်။
# ---------------------------------------------------------
# အခုတခါတော့ slam toolbox မသုံးပဲ map server နဲ့ amcl ပဲသုံးပြီး စမ်းကြမယ်။
ros2 launch nav2_bringup localization_launch.py map:=/my/map_sace.yaml use_sim_time:=true
# ဒါဆို map နဲ့အတူ localization ရပါလိမ့်မယ်။ map မပေါ်ရင် Map မှာ Durability ကို Transient Local ပြောင်းထားပါ။
# rviz မှ fixed frame ကို map ပြောင်းပြီး 2D Pose Estimate လုပ် 
ros2 launch nav2_bringup navigation_launch.py use_sim_time:=true map_subscribe_transient_local:=true


# nav2 ရဲ့ parameter တွေကို tune လို့ရအောင် config ဖိုင်များနဲ့ launch ဖိုင်များကို ကိုယ်ပိုင် packages များသို့ copy ကူးပြိးမှ ပြင်ဆင်ပါ။
sudo cp /opt/ros/humble/share/nav2_bringup/params/nav2_params.yaml ~/your_path/rom2109_nav2/
sudo cp /opt/ros/humble/share/nav2_bringup/launch/navigation_launch.py ~/your_path/rom2109_nav2/launch/
sudo cp /opt/ros/humble/share/nav2_bringup/launch/localization_launch.py ~/your_path/rom2109_nav2/launch/
# launch ဖိုင်နှစ်ခုမှာ  use_sim_time တွေကို true ခဲ့ပါတယ်။ Real Robot နဲ့ဆိုရင် false လုပ်ဖို့လိုပါမယ်။
# nav2_params.yaml မှာ robot_radius, cost_scaling_factor, inflation_radius တို့ကိုပြင်ပါ။
# ဒါဆိုရင်တော့ 

ros2 launch rom2109_gazebo rom2109_sim_ros2_control.launch.py
ros2 launch rom2109_nav2 sim_localization_launch.py
ros2 launch rom2109_nav2 sim_navigation_launch.py map_subscribe_transient_local:=true

# ပြင်ရန်ကျန် ူူူူူူူူူူူူူူ
# gazebo empty world တွင် 360 degree နဲ့ rviz 360 စစ်ပါ။ မတူရင် ros2_control ထဲမှာ ပြင်ဆင်ပါ။
# nav2_params.yaml မှာ robot_radius, cost_scaling_factor, inflation_radius တို့ကိုပြင်ပါ။












